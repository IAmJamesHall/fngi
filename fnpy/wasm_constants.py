# This file is automatically generated using tools/generate_wasm_constants.py
# Don't edit it manually.
# Constants are copy+pasted directly from the WebAssembly spec located at:
# https://www.w3.org/TR/wasm-core-1/#a6-index-of-types
from collections import OrderedDict
from dataclasses import dataclass
import copy
import ctypes
import operator
import sys

BIG_ENDIAN = sys.byteorder != 'little'

# This is the only way to get the base class for ctypes (_CData) which is
# technically private.
DataTy = ctypes.c_uint8.__bases__[0].__bases__[0]

# Used for classifying things into "modules"
class _Namespace: pass

# The webassembly namespace
w = _Namespace()

from ctypes import c_bool as Bool
from ctypes import c_uint32 as Ptr
from ctypes import c_uint8 as U8
from ctypes import c_uint16 as U16
from ctypes import c_uint32 as U32
from ctypes import c_uint64 as U64
from ctypes import c_int8 as I8
from ctypes import c_int16 as I16
from ctypes import c_int32 as I32
from ctypes import c_int64 as I64
from ctypes import c_float as F32
from ctypes import c_double as F64

w.types = _Namespace()
w.local = _Namespace()
w.global_ = _Namespace()
w.i32 = _Namespace()
w.i64 = _Namespace()
w.f32 = _Namespace()
w.f64 = _Namespace()
w.memory = _Namespace()
w.ref = _Namespace()
w.data = _Namespace()
w.table = _Namespace()
w.elem = _Namespace()

# A.6 Index of Types
w.types.i32 = 0x7f
w.types.i64 = 0x7e
w.types.f32 = 0x7d
w.types.f64 = 0x7c
w.types.element = 0x70
w.types.function = 0x60
w.types.result = 0x40

# A.7 Index of Instructions
w.unreachable = 0x0
w.nop = 0x1
w.block = 0x2
w.loop = 0x3
w.if_ = 0x4
w.else_ = 0x5
w.end = 0xb
w.br = 0xc
w.br_if = 0xd
w.br_table = 0xe
w.return_ = 0xf
w.call = 0x10
w.call_indirect = 0x11
w.drop = 0x1a
w.select = 0x1b
w.local.get = 0x20
w.local.set = 0x21
w.local.tee = 0x22
w.global_.get = 0x23
w.global_.set = 0x24
w.i32.load = 0x28
w.i64.load = 0x29
w.f32.load = 0x2a
w.f64.load = 0x2b
w.i32.load8_s = 0x2c
w.i32.load8_u = 0x2d
w.i32.load16_s = 0x2e
w.i32.load16_u = 0x2f
w.i64.load8_s = 0x30
w.i64.load8_u = 0x31
w.i64.load16_s = 0x32
w.i64.load16_u = 0x33
w.i64.load32_s = 0x34
w.i64.load32_u = 0x35
w.i32.store = 0x36
w.i64.store = 0x37
w.f32.store = 0x38
w.f64.store = 0x39
w.i32.store8 = 0x3a
w.i32.store16 = 0x3b
w.i64.store8 = 0x3c
w.i64.store16 = 0x3d
w.i64.store32 = 0x3e
w.memory.size = 0x3f
w.memory.grow = 0x40
w.i32.const = 0x41
w.i64.const = 0x42
w.f32.const = 0x43
w.f64.const = 0x44
w.i32.eqz = 0x45
w.i32.eq = 0x46
w.i32.ne = 0x47
w.i32.lt_s = 0x48
w.i32.lt_u = 0x49
w.i32.gt_s = 0x4a
w.i32.gt_u = 0x4b
w.i32.le_s = 0x4c
w.i32.le_u = 0x4d
w.i32.ge_s = 0x4e
w.i32.ge_u = 0x4f
w.i64.eqz = 0x50
w.i64.eq = 0x51
w.i64.ne = 0x52
w.i64.lt_s = 0x53
w.i64.lt_u = 0x54
w.i64.gt_s = 0x55
w.i64.gt_u = 0x56
w.i64.le_s = 0x57
w.i64.le_u = 0x58
w.i64.ge_s = 0x59
w.i64.ge_u = 0x5a
w.f32.eq = 0x5b
w.f32.ne = 0x5c
w.f32.lt = 0x5d
w.f32.gt = 0x5e
w.f32.le = 0x5f
w.f32.ge = 0x60
w.f64.eq = 0x61
w.f64.ne = 0x62
w.f64.lt = 0x63
w.f64.gt = 0x64
w.f64.le = 0x65
w.f64.ge = 0x66
w.i32.clz = 0x67
w.i32.ctz = 0x68
w.i32.popcnt = 0x69
w.i32.add = 0x6a
w.i32.sub = 0x6b
w.i32.mul = 0x6c
w.i32.div_s = 0x6d
w.i32.div_u = 0x6e
w.i32.rem_s = 0x6f
w.i32.rem_u = 0x70
w.i32.and_ = 0x71
w.i32.or_ = 0x72
w.i32.xor = 0x73
w.i32.shl = 0x74
w.i32.shr_s = 0x75
w.i32.shr_u = 0x76
w.i32.rotl = 0x77
w.i32.rotr = 0x78
w.i64.clz = 0x79
w.i64.ctz = 0x7a
w.i64.popcnt = 0x7b
w.i64.add = 0x7c
w.i64.sub = 0x7d
w.i64.mul = 0x7e
w.i64.div_s = 0x7f
w.i64.div_u = 0x80
w.i64.rem_s = 0x81
w.i64.rem_u = 0x82
w.i64.and_ = 0x83
w.i64.or_ = 0x84
w.i64.xor = 0x85
w.i64.shl = 0x86
w.i64.shr_s = 0x87
w.i64.shr_u = 0x88
w.i64.rotl = 0x89
w.i64.rotr = 0x8a
w.f32.abs = 0x8b
w.f32.neg = 0x8c
w.f32.ceil = 0x8d
w.f32.floor = 0x8e
w.f32.trunc = 0x8f
w.f32.nearest = 0x90
w.f32.sqrt = 0x91
w.f32.add = 0x92
w.f32.sub = 0x93
w.f32.mul = 0x94
w.f32.div = 0x95
w.f32.min = 0x96
w.f32.max = 0x97
w.f32.copysign = 0x98
w.f64.abs = 0x99
w.f64.neg = 0x9a
w.f64.ceil = 0x9b
w.f64.floor = 0x9c
w.f64.trunc = 0x9d
w.f64.nearest = 0x9e
w.f64.sqrt = 0x9f
w.f64.add = 0xa0
w.f64.sub = 0xa1
w.f64.mul = 0xa2
w.f64.div = 0xa3
w.f64.min = 0xa4
w.f64.max = 0xa5
w.f64.copysign = 0xa6
w.i32.wrap_i64 = 0xa7
w.i32.trunc_f32_s = 0xa8
w.i32.trunc_f32_u = 0xa9
w.i32.trunc_f64_s = 0xaa
w.i32.trunc_f64_u = 0xab
w.i64.extend_i32_s = 0xac
w.i64.extend_i32_u = 0xad
w.i64.trunc_f32_s = 0xae
w.i64.trunc_f32_u = 0xaf
w.i64.trunc_f64_s = 0xb0
w.i64.trunc_f64_u = 0xb1
w.f32.convert_i32_s = 0xb2
w.f32.convert_i32_u = 0xb3
w.f32.convert_i64_s = 0xb4
w.f32.convert_i64_u = 0xb5
w.f32.demote_f64 = 0xb6
w.f64.convert_i32_s = 0xb7
w.f64.convert_i32_u = 0xb8
w.f64.convert_i64_s = 0xb9
w.f64.convert_i64_u = 0xba
w.f64.promote_f32 = 0xbb
w.i32.reinterpret_f32 = 0xbc
w.i64.reinterpret_f64 = 0xbd
w.f32.reinterpret_i32 = 0xbe
w.f64.reinterpret_i64 = 0xbf
w.i32.extend8_s = 0xc0
w.i32.extend16_s = 0xc1
w.i64.extend8_s = 0xc2
w.i64.extend16_s = 0xc3
w.i64.extend32_s = 0xc4
w.ref.null = 0xd0
w.ref.is_null = 0xd1
w.ref.func = 0xd2
w.i32.trunc_sat_f32_s = (0xfc, 0x0)
w.i32.trunc_sat_f32_u = (0xfc, 0x1)
w.i32.trunc_sat_f64_s = (0xfc, 0x2)
w.i32.trunc_sat_f64_u = (0xfc, 0x3)
w.i64.trunc_sat_f32_s = (0xfc, 0x4)
w.i64.trunc_sat_f32_u = (0xfc, 0x5)
w.i64.trunc_sat_f64_s = (0xfc, 0x6)
w.i64.trunc_sat_f64_u = (0xfc, 0x7)
w.memory.init = (0xfc, 0x8)
w.data.drop = (0xfc, 0x9)
w.memory.copy = (0xfc, 0xa)
w.memory.fill = (0xfc, 0xb)
w.table.init = (0xfc, 0xc)
w.elem.drop = (0xfc, 0xd)
w.table.copy = (0xfc, 0xe)
w.table.grow = (0xfc, 0xf)
w.table.size = (0xfc, 0x10)
w.table.fill = (0xfc, 0x11)

# Name Lookup Dict (for testing)
wasmName = {
  w.unreachable: 'unreachable',
  w.nop: 'nop',
  w.block: 'block',
  w.loop: 'loop',
  w.if_: 'if',
  w.else_: 'else',
  w.end: 'end',
  w.br: 'br',
  w.br_if: 'br_if',
  w.br_table: 'br_table',
  w.return_: 'return',
  w.call: 'call',
  w.call_indirect: 'call_indirect',
  w.drop: 'drop',
  w.select: 'select',
  w.local.get: 'local.get',
  w.local.set: 'local.set',
  w.local.tee: 'local.tee',
  w.global_.get: 'global.get',
  w.global_.set: 'global.set',
  w.i32.load: 'i32.load',
  w.i64.load: 'i64.load',
  w.f32.load: 'f32.load',
  w.f64.load: 'f64.load',
  w.i32.load8_s: 'i32.load8_s',
  w.i32.load8_u: 'i32.load8_u',
  w.i32.load16_s: 'i32.load16_s',
  w.i32.load16_u: 'i32.load16_u',
  w.i64.load8_s: 'i64.load8_s',
  w.i64.load8_u: 'i64.load8_u',
  w.i64.load16_s: 'i64.load16_s',
  w.i64.load16_u: 'i64.load16_u',
  w.i64.load32_s: 'i64.load32_s',
  w.i64.load32_u: 'i64.load32_u',
  w.i32.store: 'i32.store',
  w.i64.store: 'i64.store',
  w.f32.store: 'f32.store',
  w.f64.store: 'f64.store',
  w.i32.store8: 'i32.store8',
  w.i32.store16: 'i32.store16',
  w.i64.store8: 'i64.store8',
  w.i64.store16: 'i64.store16',
  w.i64.store32: 'i64.store32',
  w.memory.size: 'memory.size',
  w.memory.grow: 'memory.grow',
  w.i32.const: 'i32.const',
  w.i64.const: 'i64.const',
  w.f32.const: 'f32.const',
  w.f64.const: 'f64.const',
  w.i32.eqz: 'i32.eqz',
  w.i32.eq: 'i32.eq',
  w.i32.ne: 'i32.ne',
  w.i32.lt_s: 'i32.lt_s',
  w.i32.lt_u: 'i32.lt_u',
  w.i32.gt_s: 'i32.gt_s',
  w.i32.gt_u: 'i32.gt_u',
  w.i32.le_s: 'i32.le_s',
  w.i32.le_u: 'i32.le_u',
  w.i32.ge_s: 'i32.ge_s',
  w.i32.ge_u: 'i32.ge_u',
  w.i64.eqz: 'i64.eqz',
  w.i64.eq: 'i64.eq',
  w.i64.ne: 'i64.ne',
  w.i64.lt_s: 'i64.lt_s',
  w.i64.lt_u: 'i64.lt_u',
  w.i64.gt_s: 'i64.gt_s',
  w.i64.gt_u: 'i64.gt_u',
  w.i64.le_s: 'i64.le_s',
  w.i64.le_u: 'i64.le_u',
  w.i64.ge_s: 'i64.ge_s',
  w.i64.ge_u: 'i64.ge_u',
  w.f32.eq: 'f32.eq',
  w.f32.ne: 'f32.ne',
  w.f32.lt: 'f32.lt',
  w.f32.gt: 'f32.gt',
  w.f32.le: 'f32.le',
  w.f32.ge: 'f32.ge',
  w.f64.eq: 'f64.eq',
  w.f64.ne: 'f64.ne',
  w.f64.lt: 'f64.lt',
  w.f64.gt: 'f64.gt',
  w.f64.le: 'f64.le',
  w.f64.ge: 'f64.ge',
  w.i32.clz: 'i32.clz',
  w.i32.ctz: 'i32.ctz',
  w.i32.popcnt: 'i32.popcnt',
  w.i32.add: 'i32.add',
  w.i32.sub: 'i32.sub',
  w.i32.mul: 'i32.mul',
  w.i32.div_s: 'i32.div_s',
  w.i32.div_u: 'i32.div_u',
  w.i32.rem_s: 'i32.rem_s',
  w.i32.rem_u: 'i32.rem_u',
  w.i32.and_: 'i32.and',
  w.i32.or_: 'i32.or',
  w.i32.xor: 'i32.xor',
  w.i32.shl: 'i32.shl',
  w.i32.shr_s: 'i32.shr_s',
  w.i32.shr_u: 'i32.shr_u',
  w.i32.rotl: 'i32.rotl',
  w.i32.rotr: 'i32.rotr',
  w.i64.clz: 'i64.clz',
  w.i64.ctz: 'i64.ctz',
  w.i64.popcnt: 'i64.popcnt',
  w.i64.add: 'i64.add',
  w.i64.sub: 'i64.sub',
  w.i64.mul: 'i64.mul',
  w.i64.div_s: 'i64.div_s',
  w.i64.div_u: 'i64.div_u',
  w.i64.rem_s: 'i64.rem_s',
  w.i64.rem_u: 'i64.rem_u',
  w.i64.and_: 'i64.and',
  w.i64.or_: 'i64.or',
  w.i64.xor: 'i64.xor',
  w.i64.shl: 'i64.shl',
  w.i64.shr_s: 'i64.shr_s',
  w.i64.shr_u: 'i64.shr_u',
  w.i64.rotl: 'i64.rotl',
  w.i64.rotr: 'i64.rotr',
  w.f32.abs: 'f32.abs',
  w.f32.neg: 'f32.neg',
  w.f32.ceil: 'f32.ceil',
  w.f32.floor: 'f32.floor',
  w.f32.trunc: 'f32.trunc',
  w.f32.nearest: 'f32.nearest',
  w.f32.sqrt: 'f32.sqrt',
  w.f32.add: 'f32.add',
  w.f32.sub: 'f32.sub',
  w.f32.mul: 'f32.mul',
  w.f32.div: 'f32.div',
  w.f32.min: 'f32.min',
  w.f32.max: 'f32.max',
  w.f32.copysign: 'f32.copysign',
  w.f64.abs: 'f64.abs',
  w.f64.neg: 'f64.neg',
  w.f64.ceil: 'f64.ceil',
  w.f64.floor: 'f64.floor',
  w.f64.trunc: 'f64.trunc',
  w.f64.nearest: 'f64.nearest',
  w.f64.sqrt: 'f64.sqrt',
  w.f64.add: 'f64.add',
  w.f64.sub: 'f64.sub',
  w.f64.mul: 'f64.mul',
  w.f64.div: 'f64.div',
  w.f64.min: 'f64.min',
  w.f64.max: 'f64.max',
  w.f64.copysign: 'f64.copysign',
  w.i32.wrap_i64: 'i32.wrap_i64',
  w.i32.trunc_f32_s: 'i32.trunc_f32_s',
  w.i32.trunc_f32_u: 'i32.trunc_f32_u',
  w.i32.trunc_f64_s: 'i32.trunc_f64_s',
  w.i32.trunc_f64_u: 'i32.trunc_f64_u',
  w.i64.extend_i32_s: 'i64.extend_i32_s',
  w.i64.extend_i32_u: 'i64.extend_i32_u',
  w.i64.trunc_f32_s: 'i64.trunc_f32_s',
  w.i64.trunc_f32_u: 'i64.trunc_f32_u',
  w.i64.trunc_f64_s: 'i64.trunc_f64_s',
  w.i64.trunc_f64_u: 'i64.trunc_f64_u',
  w.f32.convert_i32_s: 'f32.convert_i32_s',
  w.f32.convert_i32_u: 'f32.convert_i32_u',
  w.f32.convert_i64_s: 'f32.convert_i64_s',
  w.f32.convert_i64_u: 'f32.convert_i64_u',
  w.f32.demote_f64: 'f32.demote_f64',
  w.f64.convert_i32_s: 'f64.convert_i32_s',
  w.f64.convert_i32_u: 'f64.convert_i32_u',
  w.f64.convert_i64_s: 'f64.convert_i64_s',
  w.f64.convert_i64_u: 'f64.convert_i64_u',
  w.f64.promote_f32: 'f64.promote_f32',
  w.i32.reinterpret_f32: 'i32.reinterpret_f32',
  w.i64.reinterpret_f64: 'i64.reinterpret_f64',
  w.f32.reinterpret_i32: 'f32.reinterpret_i32',
  w.f64.reinterpret_i64: 'f64.reinterpret_i64',
  w.i32.extend8_s: 'i32.extend8_s',
  w.i32.extend16_s: 'i32.extend16_s',
  w.i64.extend8_s: 'i64.extend8_s',
  w.i64.extend16_s: 'i64.extend16_s',
  w.i64.extend32_s: 'i64.extend32_s',
  w.ref.null: 'ref.null',
  w.ref.is_null: 'ref.is_null',
  w.ref.func: 'ref.func',
  w.i32.trunc_sat_f32_s: 'i32.trunc_sat_f32_s',
  w.i32.trunc_sat_f32_u: 'i32.trunc_sat_f32_u',
  w.i32.trunc_sat_f64_s: 'i32.trunc_sat_f64_s',
  w.i32.trunc_sat_f64_u: 'i32.trunc_sat_f64_u',
  w.i64.trunc_sat_f32_s: 'i64.trunc_sat_f32_s',
  w.i64.trunc_sat_f32_u: 'i64.trunc_sat_f32_u',
  w.i64.trunc_sat_f64_s: 'i64.trunc_sat_f64_s',
  w.i64.trunc_sat_f64_u: 'i64.trunc_sat_f64_u',
  w.memory.init: 'memory.init',
  w.data.drop: 'data.drop',
  w.memory.copy: 'memory.copy',
  w.memory.fill: 'memory.fill',
  w.table.init: 'table.init',
  w.elem.drop: 'elem.drop',
  w.table.copy: 'table.copy',
  w.table.grow: 'table.grow',
  w.table.size: 'table.size',
  w.table.fill: 'table.fill',
}

# Code Lookup Dict (for testing)
wasmCode = {
  'unreachable': w.unreachable,
  'nop': w.nop,
  'block': w.block,
  'loop': w.loop,
  'if': w.if_,
  'else': w.else_,
  'end': w.end,
  'br': w.br,
  'br_if': w.br_if,
  'br_table': w.br_table,
  'return': w.return_,
  'call': w.call,
  'call_indirect': w.call_indirect,
  'drop': w.drop,
  'select': w.select,
  'local.get': w.local.get,
  'local.set': w.local.set,
  'local.tee': w.local.tee,
  'global.get': w.global_.get,
  'global.set': w.global_.set,
  'i32.load': w.i32.load,
  'i64.load': w.i64.load,
  'f32.load': w.f32.load,
  'f64.load': w.f64.load,
  'i32.load8_s': w.i32.load8_s,
  'i32.load8_u': w.i32.load8_u,
  'i32.load16_s': w.i32.load16_s,
  'i32.load16_u': w.i32.load16_u,
  'i64.load8_s': w.i64.load8_s,
  'i64.load8_u': w.i64.load8_u,
  'i64.load16_s': w.i64.load16_s,
  'i64.load16_u': w.i64.load16_u,
  'i64.load32_s': w.i64.load32_s,
  'i64.load32_u': w.i64.load32_u,
  'i32.store': w.i32.store,
  'i64.store': w.i64.store,
  'f32.store': w.f32.store,
  'f64.store': w.f64.store,
  'i32.store8': w.i32.store8,
  'i32.store16': w.i32.store16,
  'i64.store8': w.i64.store8,
  'i64.store16': w.i64.store16,
  'i64.store32': w.i64.store32,
  'memory.size': w.memory.size,
  'memory.grow': w.memory.grow,
  'i32.const': w.i32.const,
  'i64.const': w.i64.const,
  'f32.const': w.f32.const,
  'f64.const': w.f64.const,
  'i32.eqz': w.i32.eqz,
  'i32.eq': w.i32.eq,
  'i32.ne': w.i32.ne,
  'i32.lt_s': w.i32.lt_s,
  'i32.lt_u': w.i32.lt_u,
  'i32.gt_s': w.i32.gt_s,
  'i32.gt_u': w.i32.gt_u,
  'i32.le_s': w.i32.le_s,
  'i32.le_u': w.i32.le_u,
  'i32.ge_s': w.i32.ge_s,
  'i32.ge_u': w.i32.ge_u,
  'i64.eqz': w.i64.eqz,
  'i64.eq': w.i64.eq,
  'i64.ne': w.i64.ne,
  'i64.lt_s': w.i64.lt_s,
  'i64.lt_u': w.i64.lt_u,
  'i64.gt_s': w.i64.gt_s,
  'i64.gt_u': w.i64.gt_u,
  'i64.le_s': w.i64.le_s,
  'i64.le_u': w.i64.le_u,
  'i64.ge_s': w.i64.ge_s,
  'i64.ge_u': w.i64.ge_u,
  'f32.eq': w.f32.eq,
  'f32.ne': w.f32.ne,
  'f32.lt': w.f32.lt,
  'f32.gt': w.f32.gt,
  'f32.le': w.f32.le,
  'f32.ge': w.f32.ge,
  'f64.eq': w.f64.eq,
  'f64.ne': w.f64.ne,
  'f64.lt': w.f64.lt,
  'f64.gt': w.f64.gt,
  'f64.le': w.f64.le,
  'f64.ge': w.f64.ge,
  'i32.clz': w.i32.clz,
  'i32.ctz': w.i32.ctz,
  'i32.popcnt': w.i32.popcnt,
  'i32.add': w.i32.add,
  'i32.sub': w.i32.sub,
  'i32.mul': w.i32.mul,
  'i32.div_s': w.i32.div_s,
  'i32.div_u': w.i32.div_u,
  'i32.rem_s': w.i32.rem_s,
  'i32.rem_u': w.i32.rem_u,
  'i32.and': w.i32.and_,
  'i32.or': w.i32.or_,
  'i32.xor': w.i32.xor,
  'i32.shl': w.i32.shl,
  'i32.shr_s': w.i32.shr_s,
  'i32.shr_u': w.i32.shr_u,
  'i32.rotl': w.i32.rotl,
  'i32.rotr': w.i32.rotr,
  'i64.clz': w.i64.clz,
  'i64.ctz': w.i64.ctz,
  'i64.popcnt': w.i64.popcnt,
  'i64.add': w.i64.add,
  'i64.sub': w.i64.sub,
  'i64.mul': w.i64.mul,
  'i64.div_s': w.i64.div_s,
  'i64.div_u': w.i64.div_u,
  'i64.rem_s': w.i64.rem_s,
  'i64.rem_u': w.i64.rem_u,
  'i64.and': w.i64.and_,
  'i64.or': w.i64.or_,
  'i64.xor': w.i64.xor,
  'i64.shl': w.i64.shl,
  'i64.shr_s': w.i64.shr_s,
  'i64.shr_u': w.i64.shr_u,
  'i64.rotl': w.i64.rotl,
  'i64.rotr': w.i64.rotr,
  'f32.abs': w.f32.abs,
  'f32.neg': w.f32.neg,
  'f32.ceil': w.f32.ceil,
  'f32.floor': w.f32.floor,
  'f32.trunc': w.f32.trunc,
  'f32.nearest': w.f32.nearest,
  'f32.sqrt': w.f32.sqrt,
  'f32.add': w.f32.add,
  'f32.sub': w.f32.sub,
  'f32.mul': w.f32.mul,
  'f32.div': w.f32.div,
  'f32.min': w.f32.min,
  'f32.max': w.f32.max,
  'f32.copysign': w.f32.copysign,
  'f64.abs': w.f64.abs,
  'f64.neg': w.f64.neg,
  'f64.ceil': w.f64.ceil,
  'f64.floor': w.f64.floor,
  'f64.trunc': w.f64.trunc,
  'f64.nearest': w.f64.nearest,
  'f64.sqrt': w.f64.sqrt,
  'f64.add': w.f64.add,
  'f64.sub': w.f64.sub,
  'f64.mul': w.f64.mul,
  'f64.div': w.f64.div,
  'f64.min': w.f64.min,
  'f64.max': w.f64.max,
  'f64.copysign': w.f64.copysign,
  'i32.wrap_i64': w.i32.wrap_i64,
  'i32.trunc_f32_s': w.i32.trunc_f32_s,
  'i32.trunc_f32_u': w.i32.trunc_f32_u,
  'i32.trunc_f64_s': w.i32.trunc_f64_s,
  'i32.trunc_f64_u': w.i32.trunc_f64_u,
  'i64.extend_i32_s': w.i64.extend_i32_s,
  'i64.extend_i32_u': w.i64.extend_i32_u,
  'i64.trunc_f32_s': w.i64.trunc_f32_s,
  'i64.trunc_f32_u': w.i64.trunc_f32_u,
  'i64.trunc_f64_s': w.i64.trunc_f64_s,
  'i64.trunc_f64_u': w.i64.trunc_f64_u,
  'f32.convert_i32_s': w.f32.convert_i32_s,
  'f32.convert_i32_u': w.f32.convert_i32_u,
  'f32.convert_i64_s': w.f32.convert_i64_s,
  'f32.convert_i64_u': w.f32.convert_i64_u,
  'f32.demote_f64': w.f32.demote_f64,
  'f64.convert_i32_s': w.f64.convert_i32_s,
  'f64.convert_i32_u': w.f64.convert_i32_u,
  'f64.convert_i64_s': w.f64.convert_i64_s,
  'f64.convert_i64_u': w.f64.convert_i64_u,
  'f64.promote_f32': w.f64.promote_f32,
  'i32.reinterpret_f32': w.i32.reinterpret_f32,
  'i64.reinterpret_f64': w.i64.reinterpret_f64,
  'f32.reinterpret_i32': w.f32.reinterpret_i32,
  'f64.reinterpret_i64': w.f64.reinterpret_i64,
  'i32.extend8_s': w.i32.extend8_s,
  'i32.extend16_s': w.i32.extend16_s,
  'i64.extend8_s': w.i64.extend8_s,
  'i64.extend16_s': w.i64.extend16_s,
  'i64.extend32_s': w.i64.extend32_s,
  'ref.null': w.ref.null,
  'ref.is_null': w.ref.is_null,
  'ref.func': w.ref.func,
  'i32.trunc_sat_f32_s': w.i32.trunc_sat_f32_s,
  'i32.trunc_sat_f32_u': w.i32.trunc_sat_f32_u,
  'i32.trunc_sat_f64_s': w.i32.trunc_sat_f64_s,
  'i32.trunc_sat_f64_u': w.i32.trunc_sat_f64_u,
  'i64.trunc_sat_f32_s': w.i64.trunc_sat_f32_s,
  'i64.trunc_sat_f32_u': w.i64.trunc_sat_f32_u,
  'i64.trunc_sat_f64_s': w.i64.trunc_sat_f64_s,
  'i64.trunc_sat_f64_u': w.i64.trunc_sat_f64_u,
  'memory.init': w.memory.init,
  'data.drop': w.data.drop,
  'memory.copy': w.memory.copy,
  'memory.fill': w.memory.fill,
  'table.init': w.table.init,
  'elem.drop': w.elem.drop,
  'table.copy': w.table.copy,
  'table.grow': w.table.grow,
  'table.size': w.table.size,
  'table.fill': w.table.fill,
}
