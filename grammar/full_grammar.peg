# A file is a list of let statements
file = ( stmt ws? ";"? )*

# Lexemes
ws = (whitespace / comment)+
numeric = ~"[0-9]"    # note: ~"..." is a regex
alpha  = ~"[A-Z]"i    # note: i means "ignore case"
alphanumeric = ~"[0-9A-Z]"i
never = ws? "[" "]"  # never/void type and value
rawStr = ws? ~'"[^"]"'s               # "this is a raw string"
escapedStr = ws? ~'(?s)\\\".*?\\\"'s  # \"this is an escaped string\"


# Comments
comment = lineComment / blockComment
lineComment = whitespace? ~"//.*\n"       # // a line comment
blockComment = whitespace? ~"/\\*.*?\\*/"s  # /* a block comment */
whitespace = ~"\\s+"          # whitespace is ignored

number = ws? numeric+
iden   = ws? alpha alphanumeric*
op =  ws? (  # binary operator
  "$"
  / "==" / "!=" / "and" / "or"
  / "bitand" / "bitor" / "bitxor"
  / "+" / "-" / "*" / "/"
)
flowCtrl = ws? ("return" / ("break" iden?) / "defer")

unaryOp = ws? ( "&" / "@" / "not" / "-" )


# Blocks, expressions and statements
expr = exprUnit ( op exprUnit )*
block = ws? "(" ( stmt ws? ";" )* expr? ws? ")"
stmt = ws / let / fn / struct / ( flowCtrl? expr )

let = ws? "let" iden ws? ":" type ws? "=" expr
fn = ws? "fn" iden ws? ":" typeFn block
exprUnit = unaryOp? ( flowExpr / value / block / name )


# Names: A macro call can be anywhere a name can appear
# Macros are the only prefix operators because they
# must be parsed in the expression. Normally they
# are part of the name, i.e. `!foo` instead of `! foo`
name = macro / nameNoMacro

macro = macro2 / macro1
macro1 = ws? "!" nameNoMacro expr
macro2 = ws? "!!" nameNoMacro expr expr

# A non-macro name is composed of name units chained by "."
nameNoMacro = nameUnit (ws? "." nameUnit)*
nameUnit = ws? iden nameBlock?
nameBlock = (
  ws? "[" 
    number? ws? "&"? name 
    (ws? ";" number? ws? "&"? name)* ws? ";"? ws? 
  "]")


# Types
type = ws? "&"? ( typeFn / typeNoFn )
typeFn = typeNoFn ws? "->" typeNoFn
typeNoFn = ws? (
  never / stack / array
  / structTyBlock / paramsTyBlock
  / name
)

struct = ws? "struct" name ws? ":" structTyBlock

idenType = iden ws? ":" type
structTyBlock = ws? "[" idenType (ws? ";" idenType)* ws? ";"? ws? "]"
paramsTyBlock = ws? "[" idenType (ws? "," idenType)* ws? ","? ws? "]"

stack = ws? "stk" ws? "[" type (ws? "," type)* ws? ","? ws? "]"
array = ws? "[" number type ws? "]"

# Values
value = ws? (
  never / number / rawStr / escapedStr
  / structValue / paramsValue
)

idenEq = iden ws? "=" expr
structValue = ws? "{" idenEq ( ws? ";" idenEq )* ws? ";"? ws? "}"
paramsValue = ws? "{" expr ( ws? "," expr )* ws? ","? ws? "}"


# Flow (if/loop/etc)
IF = ws? "if"
THEN = ws? "then"
ELIF = ws? "elif"
ELSE = ws? "else"
WHILE = ws? "hile"

flowExpr = if / while
if = IF expr THEN expr (ELIF expr THEN expr)* (ELSE expr)?
while = WHILE expr THEN expr
