# Base Units
never = "[" "]"  # never/void type and value

numeric = ~"[0-9]"    # note: ~"..." is a regex
alpha  = ~"[A-Z]"i    # note: i means "ignore case"
alphanumeric = ~"[0-9A-Z]"i
rawStr = "\"" .* "\""           # "this is a raw string"
escapedStr = "\\\"" .* "\\\""   # \"this is a\n"escaped" string\"

number = numeric+
iden   = alpha alphanumeric*
operator =  (
  "$"
  / "==" / "!=" / "and" / "or"
  / "bitand" / "bitor"
  / "+" / "-" / "*" / "/"
)

preOperator = (
  "&" / "@" / "not"
)


# A file is a list of let statements
file = ( let ";"? )*


# Blocks, expressions and statements
expression = expressionUnit ( operator expressionUnit )*
block = "(" statement* expression? ")"
statement = ( let / expression ) ";"

let = "let" iden ":" type "=" expression
expressionUnit = preOperator? ( value / name / block )


# Names: A macro call can be anywhere a name can appear
name = singleMacro / doubleMacro / nameNoMacro

singleMacro = "!" nameNoMacro expression
doubleMacro = "!!" nameNoMacro expression expression

# A non-macro name is composed of name units chained by "."
nameNoMacro = nameUnit ("." nameUnit)*
nameUnit = iden nameBlock?
nameBlock = "[" number? "&"? name (";" number? "&"? name)* ";"? "]"


# Types
type = "&"? ( typeFn / typeNoFn )
typeFn = typeNoFn "->" typeNoFn
typeNoFn = (
  never / stack / array
  / structTyBlock / paramsTyBlock
  / name
)

idenType = iden ":" type
structTyBlock = "[" idenType (";" idenType)* ";"? "]"
paramsTyBlock = "[" idenType ("," idenType)* ","? "]"

stack = "stk" "[" type ("," type)* ","? "]"
array = "[" number type "]"

# Values
value = (
  never / number / rawStr / escapedStr
  / structValue / paramsValue
)

idenEq = iden "=" expression
structValue = "{" idenEq ( ";" idenEq )* ";"? "}"
paramsValue = "{" expression ( "," expression )* ","? "}"
