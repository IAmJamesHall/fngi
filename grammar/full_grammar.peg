never = "[" "]"  # never/void type

numeric = ~"[0-9]"    # note: ~"..." is a regex
alpha  = ~"[A-Z]"i    # note: i means "ignore case"
alphanumeric = ~"[0-9A-Z]"i

number = numeric+
iden   = alpha alphanumeric*

statement = ( let / expression ) ";"

expression = never / number / block / fnCall / name

block = "(" statement* expression? ")"

namePart = iden typeblock?
structMemberOrName = ( iden ":" )? name
typeblock = (
  "["
    number? # for declaring arrays

    # [foo: Bar[Baz]; bob: Bab]
    # or [Bar[Baz]; Bab]
    (
       structMemberOrName ( ";" structMemberOrName )* ";"?
    )
    /
    # [Foo[Baz], Bab]
    (
      name ("," name) ","?
    )
  "]"
)

nameNoMacro = namePart ("." namePart)*

singleMacro = "!" nameNoMacro expression
doubleMacro = "!!" nameNoMacro expression expression
macro = singleMacro / doubleMacro

# A macro call can be anywhere a name can appear
name = macro | nameNoMacro

fn = "fn" type "->" type block?

type = never / name / typeblock / fn

let = "let" iden ":" type "=" expression

fnCall = name expression

