file = (expr SC)* ws

# Lexemes
ws = (whitespace / lineComment / blockComment)*
whitespace = ~"\\s+"          # whitespace is ignored
lineComment = ~"//.*\n"         # // a line comment
blockComment = ~"/\\*.*?\\*/"s  # /* a block comment */

SC = ws ";" # semi-colon
VOID = "[" ws "]"
EMPTY = "{" ws "}"
NUMBER = _numeric+
IDEN = _alphanumeric+
STR = _escStr / _rawStr
FN = "fn"
STRUCT = "struct"
VAR = "var"
STK = "stk"
ARR = "arr"
NOT = "not"
AND = "and"
OR = "or"
BITNOT = "bitnot"
BITOR = "bitor"
BITXOR = "bitxor"
BITAND = "bitand"


# Helper Regexes
_numeric = ~"[0-9]"    # note: ~"..." is a regex
_alpha  = ~"[A-Z]"i    # note: i means "ignore case"
_alphanumeric = ~"[0-9A-Z]"i
_escStr = ~'(?s)\\\".*?\\\"'s  # \"this is a\n"escaped" string\"
_rawStr = ~'"[^"]"'s           #  "this is a raw string"


# Ty Recursive Descent
ty = "&"? fnTy
fnTy = primaryTy (ws "->" primaryTy)?
primaryTy = ws ( VOID / structBlock / stkBlock / arrBlock / name )

stkBlock = STK ws "[" multiTy ws "]"
arrBlock = ARR ws "[" ws NUMBER ty ws "]"
structBlock = "[" (multiVar / multiTy) ws "]"
multiTy = ty (SC ty)* SC?
multiVar = declVar (SC declVar)* SC?


# Name Recursive Descent
name = macro2
macro2 = macro1 (ws "!!" primary primary)?
macro1 = nameLiteral (ws "!" primary)?
nameLiteral = ws IDEN (ws nameBlock)? (ws "." nameLiteral)*

nameBlock = "[" nameUnit (SC nameUnit)* SC? ws "]"
nameUnit = ws NUMBER? ws "&"? name


# Statement Selection
stmt = (ws (declStruct / declFn / declVar)) / expr
declStruct = ws "struct" name ws ":" ty ws structBlock
declFn = ws FN name ws ":" fnTy block
declVar = ws IDEN ws ":" ty (ws "=" expr)


# Expression Recursive Descent
expr = assign
assign = equality (ws ":=" equality)*
equality = logical (ws ( "!=" / "==" ) logical )*
logical = comparison (ws (OR / AND) comparison)*
comparison = bitwise (ws ( ">" / ">=" / "<" / "<=" ) bitwise )*
bitwise = term (ws (BITOR / BITXOR / BITAND) term)*
term = factor (ws ( "-" / "+" ) factor)*
factor = call (ws ( "/" / "*" ) unary)*
call = unary (ws "$" unary)*
unary = (NOT / BITNOT / "-" ) ws (unary / primary)
primary = ws (
  EMPTY / NUMBER / STR / block / stk / arr / struct / name
)

block = "(" multiExpr ws ")"
stk = STK ws "{" multiExpr ws "}"
arr = ARR ws "{" multiExpr ws "}"
struct = "{" (multiStructAssign / multiExpr) ws "}"
multiExpr = expr (SC expr)* SC?
multiStructAssign = structAssign (SC structAssign)* SC?
structAssign = ws IDEN ws "=" assign
