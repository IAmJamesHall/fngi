// This file creates some essential assembly utilities including

// Define $loc
.4@vHeap FT^ =loc // fetch current heap and set to loc
  FTML        ; .2@vHeap,  // fetch heap {heap:4}
  .4 LIT DVF    ; .2@D_scan,   // scan next token into tokenBuf {heap}
  .4 LIT DVS RET; .2@D_dict,   // set dict key(tokenBuf) to current heap

.4 $loc dictSet / {v}
  .4 LIT DVF    ; .2@D_scan,
  .4 LIT DVS RET; .2@D_dict,
$loc dictGet / { -> v}
  .4 LIT DVF    ; .2@D_scan,
  .4 LIT DVF RET; .2@D_dict,

$loc h2  // {val:2} push 2bytes from stack to heap
  .4 FTML SWP; .2@vHeap,  // fetch heap and swap {heap, val}
  .2      SR;             // store 2 byte value at heap
  .4 FTML INC2; .2@vHeap, // fetch heap and increment by 2
  .4 SRML  RET; .2@vHeap, // store new heap and return

$loc h4  // {val:4} push 4bytes from stack to heap
  .4 FTML SWP; .2@vHeap,  // ft heap
  .4      SR;             // sr 4byte value
  .4 FTML INC4; .2@vHeap, // ft heap and +4
  .4 SRML  RET; .2@vHeap, // sr new heap

// {v:4} compile a LIT4 (value-only) to the heap for LIT4.
// Note: compiled as two U2 values with largest first.
.4 $loc hL4
  // Duplicate, then call h2(v>>0x10)
  DUP;   LIT SHR XSL; #10 $h2  @h2 $h2 // Compile high bits
  JMPL; @h2 $h2

.4
$loc getHeap     FTML RET; @vHeap $h2
$loc setHeap     SRML RET; @vHeap $h2
$loc getTopHeap  FTML RET; @vTopHeap $h2
$loc setTopHeap  SRML RET; @vTopHeap $h2
$loc getSz       LIT DVF RET; @D_sz $h2
$loc setSz       LIT DVS RET; @D_sz $h2
$loc getWsLen    LIT DVF RET; @D_wslen $h2
$loc c_scan      LIT DVF RET; @D_scan $h2
$loc c_asemble   LIT DVS RET; @D_comp $h2
$loc c_assembleNext // scan and assemble
  LIT DVF; @D_scan $h2
  LIT DVS RET; @D_comp $h2

.4 $loc c_compMaskInstr // {maskInstr:4}
  LIT DVS; @D_instr $h2 // use mask on instr
  LIT DVF; @D_instr $h2 // get instr
  XSL; @h2 $h2 // compile instr to heap

  // Clear current instr (preserves sz)
  LIT4; @CLR_INSTR $hL4
  LIT DVS RET; @D_instr $h2

// ex: #1 $l2 #2 $l2 ADD $xsl foo // adds 1 and 2, then execs foo
.4 $loc xsl
  LIT4 XSL; @XSL $hL4  @c_compMaskInstr $h2 // compile with XSL
  XSL; @dictGet $h2 // get next token's ptr
  JMPL; @h2 $h2 // put on stack

.4 $loc jmpl // like xsl
  LIT4 XSL; @JMPL $hL4  @c_compMaskInstr $h2 // compile with JMPL
  $xsl dictGet // get next token's ptr
  JMPL; @h2 $h2 // put on stack

// ex: LIT; #1$h2  ADD #2 $l2_xsl foo
// Single instr that uses literal and calls.
.4 $loc l2_xsl
  LIT4; @LIT $hL4 // get LIT instr
  LIT DVS; @D_instr $h2 // use mask on instr
  LIT4 XSL; @XSL $hL4 @c_compMaskInstr $h2
  $xsl h2 // compile literal
  $xsl dictGet // get next token value
  $jmpl h2 // compile it

.2 $loc c_LIT // compile a literal from the stack {v:2}
  LIT;  @Sz2 @LIT ADD^ $h2 // push `.2 LIT` instruction to stack
  LIT XSW; @h2 $h2 // compile it
  LIT JMPW; @h2 $h2  // compile value

.4 $loc c_XSW / {loc} compile a cnl
  @Sz4 @LIT @XSW ADD^ ADD^ $c_LIT // push .4 LIT XSW instr
  LIT XSW; @h2 $h2 // compile it.
  LIT JMPW; @h2 $h2  // compile the loc

.4 $loc c_JMPW / {loc} compile a jmp along with current instr
  @Sz4 @LIT @JMPW ADD^ ADD^ $c_LIT // push .4 LIT JMPW instr
  @h2 $c_XSW // compile it
  LIT JMPW; @h2 $h2 // compile the loc

.4 $loc c_FTML4 / {loc} compile a fetch literal sz=4
  @Sz4 @FTML ADD^ $c_LIT // push .4 FTML instr
  @h2 $c_XSW // compile it
  LIT JMPW; @h2 $h2 // compile the loc

.4 $loc c_FTML2 / {loc} compile a fetch literal sz=2
  @Sz2 @FTML ADD^ $c_LIT // push .2 FTML instr
  @h2 $c_XSW // compile it
  LIT JMPW; @h2 $h2 // compile the loc

.4 $loc c_LIT4 // compile a LIT4 from the stack {v:4}
  @Sz4 @LIT4 ADD^ $c_LIT // push `.4 LIT4` instruction to stack
  @h2 $c_XSW // compile it
  @hL4 $c_JMPW // compile the 4byte value



// **********
// * Jump location setup and update
.2 $loc jloc // declare a jump location. ex: $jloc jmpTo
  @getHeap $c_XSW   @dictSet $c_XSW // set dict of token to heap
  #BAD $c_LIT        @h2 $c_JMPW       // set asside space to update

// Update jloc with current 2byte heap. ex: $jset jmpTo
.4 $loc jset
  @dictGet $c_XSW  @getHeap $c_XSW // {addr curHeap}
  .2 SR RET; // store curHeap

// **********
// * Utilities

// Get next token dict reference
$loc c_dRef     @c_scan $c_XSW  .4 LIT DVF RET; @D_rdict $h2

// Forget dict until and including next token
$loc dForget  @c_scan $c_XSW  .4 LIT DVS RET; @D_rdict $h2

.4 $loc hAlign4 // align heap
  @getHeap $c_XSW DUP;
  LIT MOD; #4 $h2 // {heap heap%4}
  DUP JZL; $jloc j_to
    SUB; LIT ADD; #4 $h2  // heap - (heap%4) + 4
    @setHeap $c_JMPW
  $jset j_to
    DRP2 RET;
$dForget j_to

.4
$loc assertWsEmpty @getWsLen $c_XSW @E_wsEmpty $c_LIT // fallthrough
$loc assertNot     SWP; NOT; SWP; // fallthrough
$loc assert        LIT DVF RET; @D_assert $h2

$loc tAssert     @E_test $c_LIT  @assert $c_JMPW
$loc tAssertNot  @E_test $c_LIT  @assertNot $c_JMPW
$loc tAssertEq   .4 EQ;          @tAssert $c_JMPW
$loc tAssertNe   .4 NEQ;         @tAssert $c_JMPW

$assertWsEmpty
