// This file creates some essential assembly utilities including

// Define $loc
.4@rHeap FT^ =loc // fetch current heap and set to loc
  FTML        ; .2@rHeap,  // fetch heap {heap:4}
  .4 LIT DVF    ; .2@D_scan,   // scan next token into tokenBuf {heap}
  .4 LIT DVS RET; .2@D_dict,   // set dict key(tokenBuf) to current heap

.4 $loc dictSet / {v}
  .4 LIT DVF    ; .2@D_scan,
  .4 LIT DVS RET; .2@D_dict,
$loc dictGet / { -> v}
  .4 LIT DVF    ; .2@D_scan,
  .4 LIT DVF RET; .2@D_dict,

$loc h2  // {val:2} push 2bytes from stack to heap
  .4 FTML SWP; .2@rHeap,  // fetch heap and swap {heap, val}
  .2      SR;             // store 2 byte value at heap
  .4 FTML INC2; .2@rHeap, // fetch heap and increment by 2
  .4 SRML  RET; .2@rHeap, // store new heap and return

.4
$loc getHeap     FTML RET; @rHeap $h2
$loc setHeap     SRML RET; @rHeap $h2
$loc getTopHeap  FTML RET; @rTopHeap $h2
$loc setTopHeap  SRML RET; @rTopHeap $h2
$loc getSz       LIT DVF RET; @D_sz $h2
$loc setSz       LIT DVS RET; @D_sz $h2
$loc getWsLen    LIT DVF RET; @D_wslen $h2

.2 $loc c_LIT // compile an literal from the stack {v:2}
  LIT;  @Sz2 @LIT ADD^, // push `.2 LIT` instruction to stack
  LIT UCAL; @h2, // compile it
  LIT JMP; @h2,  // compile value

.4 $loc c_UCAL / {loc} compile a cnl
  @Sz4 @LIT @UCAL ADD^ ADD^ $c_LIT // push .4 LIT UCAL instr
  LIT UCAL; @h2 $h2 // compile it.
  LIT JMP; @h2 $h2  // compile the loc

.4 $loc c_JMP / {loc} compile a jmp
  @Sz4 @LIT @JMP ADD^ ADD^ $c_LIT // push .4 LIT JMP instr
  @h2 $c_UCAL // compile it
  LIT JMP; @h2 $h2 // compile the loc

.4 $loc c_FTML4 / {loc} compile a fetch literal sz=4
  @Sz4 @FTML ADD^ $c_LIT // push .4 FTML instr
  @h2 $c_UCAL // compile it
  LIT JMP; @h2 $h2 // compile the loc

.4 $loc c_FTML2 / {loc} compile a fetch literal sz=2
  @Sz2 @FTML ADD^ $c_LIT // push .2 FTML instr
  @h2 $c_UCAL // compile it
  LIT JMP; @h2 $h2 // compile the loc

// **********
// * Jump location setup and update
.2 $loc jloc // declare a jump location. ex: $jloc jmpTo
  @getHeap $c_UCAL   @dictSet $c_UCAL // set dict of token to heap
  #BAD $c_LIT        @h2 $c_JMP       // set asside space to update

// Update jloc with current 2byte heap. ex: $jset jmpTo
.4 $loc jset
  @dictGet $c_UCAL  @getHeap $c_UCAL // {addr curHeap}
  .2 SR RET; // store curHeap

// **********
// * Utilities
.4
$loc c_scan     .4 LIT DVF RET; @D_scan $h2

// Get next token dict reference
$loc c_dRef     @c_scan $c_UCAL  .4 LIT DVF RET; @D_rdict $h2

// Forget dict until and including next token
$loc dForget  @c_scan $c_UCAL  .4 LIT DVS RET; @D_rdict $h2

.4 $loc hAlign4 // align heap
  @getHeap $c_UCAL DUP;
  LIT MOD; #4 $h2 // {heap heap%4}
  DUP JZL; $jloc j_to
    SUB; LIT ADD; #4 $h2  // heap - (heap%4) + 4
    @setHeap $c_JMP
  $jset j_to
    DRP2 RET;
$dForget j_to

.4
#00 =E_Unknown
#01 =E_WsNotEmpty
#02 =E_DictDNE
#03 =E_Test

.4
$loc assertWsEmpty @getWsLen $c_UCAL @E_WsNotEmpty $c_LIT // fallthrough
$loc assertNot     SWP; NOT; SWP; // fallthrough
$loc assert        LIT DVF RET; @D_assert $h2

$loc tAssert     @E_Test $c_LIT  @assert $c_JMP
$loc tAssertNot  @E_Test $c_LIT  @assertNot $c_JMP
$loc tAssertEq   EQ;            @tAssert $c_JMP
$loc tAssertNe   NEQ;           @tAssert $c_JMP

$assertWsEmpty
#1 $tAssert
