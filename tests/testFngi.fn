$c_fngi

$tAssert(1)
$tAssertNot(0)
$tAssert(1 == 1)
SFN useEq ret(1 == 2);
$tAssertNot(useEq)

$tAssert(0x42 >= 0x30)
$tAssert(11 < 12)
$tAssert(lAnd(0x1, 0x8) == TRUE)
$tAssertEq(lAnd(0x1, 0x8), TRUE)
$tAssertNot(bAnd(0x1, 0x8))
$tAssertEq(bAnd(0xFF, 0xC), 0xC)
$tAssertEq(lOr(0x0, 0x8), TRUE)
$tAssertEq(bOr(0x0, 0x8), 0x8)
$tAssertEq(0c\t, 0x09)

$tAssertEq(FN_REF useEq, toRef(dictGet useEq))

$loc testFngiMsg  | Hello world from testFngi.fn!\n|
$_printz(testFngiMsg)

SFN daAnswer ret 0x42
SFN testXsw  ret xsw($lit(FN_REF daAnswer))
$tAssertEq(0x42, testXsw)


FN testSET PRE
  $SZ4 LOCAL a  END_LOCALS
  $assertWsEmpty
  4 _SET a
  SET a = inc(GET a)
  ret(GET a)
$tAssertEq(testSET, 5)


\ **********
\ ** Test Block Allocator
$tAssertEq(0xFF, BA_iNull)

\ $setSysLogLvl(LOG_EXECUTE)
$(42 SZ1) GLOBAL glblAnswer
$tAssertEq(42, GET glblAnswer)

$BA_init(REF BA_kernel)

FN testBASimple
  $SZ4 LOCAL blk
  $SZ1 LOCAL iBlk
  END_LOCALS
  tAssertEq(0, ft1(REF BA_kernel + BA_rootOfs));
  tAssertEq(1, BA_iGet(0, REF BA_kernel));
  tAssertEq(2, BA_iGet(1, REF BA_kernel));

  SET iBlk = BA_iAlloc(REF BA_kernel);
  tAssertEq(0, GET iBlk)
  tAssertEq(1, ft1(REF BA_kernel + BA_rootOfs)); \ root changed
  SET blk = BA_iToPtr(GET iBlk, REF BA_kernel);
  tAssertEq(ft4(REF BA_kernel + BA_blocksOfs), GET blk)
  tAssertEq(GET blk,  BA_iToPtr(GET iBlk, REF BA_kernel));
  tAssertEq(GET iBlk, BA_ptrToI(GET blk,  REF BA_kernel));

  BA_free(GET blk, REF BA_kernel)
  tAssertEq(0, ft1(REF BA_kernel + BA_rootOfs)); \ root changed
  tAssertEq(1, BA_iGet(0, REF BA_kernel));
  tAssertEq(2, BA_iGet(1, REF BA_kernel));
  ret;

$testBASimple

\ **********
\ ** Test SLL

$(NULL      SZ4) GLOBAL sll_c
$(REF sll_c SZ4) GLOBAL sll_b
$(REF sll_b SZ4) GLOBAL sll_a
$(REF sll_a SZ4) GLOBAL sll_root \ root->a->b->c

$tAssertEq(REF sll_a, SLL_pop(REF sll_root)) \ root->b->c
$tAssertEq(REF sll_b, SLL_pop(REF sll_root)) \ root->c
 $SLL_push(REF sll_a, REF sll_root)          \ root->a->c
$tAssertEq(REF sll_a, SLL_pop(REF sll_root)) \ root->c
$tAssertEq(REF sll_c, SLL_pop(REF sll_root)) \ root->NULL
$tAssertEq(NULL     , SLL_pop(REF sll_root))
$tAssertEq(NULL     , SLL_pop(REF sll_root))

\ **********
\ ** Test AA
$sort2(5 10) $tAssertEq(_, 10) $tAssertEq(_, 5)
$sort2(10 5) $tAssertEq(_, 10) $tAssertEq(_, 5)

$tAssert   (canBlocksMerge(16 24 3))
$tAssert   (canBlocksMerge(64 96 5))

$tAssertNot(canBlocksMerge(8 16 3))
$tAssertNot(canBlocksMerge(8 24 3))
$tAssertNot(canBlocksMerge(4 12 3))
$tAssertNot(canBlocksMerge(12 20 3))
$tAssertNot(canBlocksMerge(32 64 4))
$tAssertNot(canBlocksMerge(64 96 4))

$tAssert(AA_isValidPo2(2))
$tAssert(AA_isValidPo2(3))
$tAssert(AA_isValidPo2(11))
$tAssert(AA_isValidPo2(12))
$tAssertNot(AA_isValidPo2(0))
$tAssertNot(AA_isValidPo2(1))
$tAssertNot(AA_isValidPo2(13))


