$c_fngi

$tAssert(1)
$tAssertNot(0)
$tAssert(1 == 1)
FN useEq ret(1 == 2);
$tAssertNot(useEq)

$tAssert(0x42 >= 0x30)
$tAssert(11 < 12)
$tAssert(and(0x1, 0x8) == TRUE)
$tAssertEq(and(0x1, 0x8), TRUE)
$tAssertNot(msk(0x1, 0x8))
$tAssertEq(msk(0xFF, 0xC), 0xC)
$tAssertEq(or(0x0, 0x8), TRUE)
$tAssertEq(jn(0x0, 0x8), 0x8)
$tAssertEq(0c\t, 0x09)

$tAssertEq(REF useEq, gdictGet useEq)

FN daAnswer ret 0x42
FN testXsw  ret xsw($lit(REF daAnswer))
$tAssertEq(0x42, testXsw)

FN testSET PRE
  $declVar(declL a, SZ4, 4) $declEnd
  $assertWsEmpty;
  4          -> _SET a
  inc(GET a) -> _SET a
  ret(GET a)
$tAssertEq(testSET, 5)

$declVar(declG glblAnswer, SZ1, 1)
  $sr1(42, gRef glblAnswer)

$tAssertEq(42, GET glblAnswer)

\ FN testIsComment
\   c_scan; c_isComment;
\   0 -> _SET c_tokenLen
\   ret;
\ 
\ \ TODO: for some reason if you put testIsComment inside of the assertEq
\ \ block, it causes the c_scanNoEof in c_now to trigger an exception.
\ $testIsComment \hello -> $tAssertEq(TRUE)
\ 
\ \ FN testIf  PRE \ {s -> o}
\ \   if  (dup == 1) do (drp; 0x42)
\ \   elif(dup == 7) do (drp; 0x777)
\ \   else (drp; 0x22)
\ \   ret(_)
\ \ 
\ \ $tAssertEq(0x42,  testIf(1))
\ \ $tAssertEq(0x777, testIf(7))
\ \ $tAssertEq(0x22,  testIf(0))
\ 
\ $assertWsEmpty
